/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.rezervacija;

import domain.Klijent;
import domain.Rezervacija;
import domain.Smestaj;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import kontroler.Kontroler;
import sesija.Sesija;

/**
 *
 * @author user
 */
public class FormNovaRezervacija extends javax.swing.JDialog {

    private Smestaj s;
    private Rezervacija r;

    /**
     * Creates new form FormNovaRezervacija
     */
    public FormNovaRezervacija(java.awt.Dialog parent, boolean modal, Smestaj smestaj) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.s = smestaj;
        popuni();
        pack();
    }
    
    public FormNovaRezervacija(java.awt.Dialog parent, boolean modal, Rezervacija rezervacija) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.r = rezervacija;
        popuni2();
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pickDatumOd = new org.jdesktop.swingx.JXDatePicker();
        lblDatumDolaska = new javax.swing.JLabel();
        lblDatumOdlaska = new javax.swing.JLabel();
        pickDatumDo = new org.jdesktop.swingx.JXDatePicker();
        btnRezervisi = new javax.swing.JButton();
        pnlSmestaj = new javax.swing.JPanel();
        lblCena = new javax.swing.JLabel();
        txtCena = new javax.swing.JTextField();
        lblNaziv = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        lblBrojKreveta = new javax.swing.JLabel();
        lblUkupno = new javax.swing.JLabel();
        txtUkupno = new javax.swing.JTextField();
        txtBrojKreveta = new javax.swing.JTextField();
        btnOtkazi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BuKing - Kreiranje rezervacije");

        pickDatumOd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickDatumOdActionPerformed(evt);
            }
        });

        lblDatumDolaska.setText("Datum dolaska: ");

        lblDatumOdlaska.setText("Datum odlaska: ");

        pickDatumDo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickDatumDoActionPerformed(evt);
            }
        });

        btnRezervisi.setText("Potvrdi rezervaciju");
        btnRezervisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRezervisiActionPerformed(evt);
            }
        });

        pnlSmestaj.setBorder(javax.swing.BorderFactory.createTitledBorder("Podaci o smestaju"));

        lblCena.setText("Cena prenocista:");

        txtCena.setEnabled(false);

        lblNaziv.setText("Naziv smestaja:");

        txtNaziv.setEnabled(false);

        lblBrojKreveta.setText("Broj kreveta: ");

        lblUkupno.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUkupno.setText("Ukupno:");

        txtUkupno.setEnabled(false);

        txtBrojKreveta.setEnabled(false);

        javax.swing.GroupLayout pnlSmestajLayout = new javax.swing.GroupLayout(pnlSmestaj);
        pnlSmestaj.setLayout(pnlSmestajLayout);
        pnlSmestajLayout.setHorizontalGroup(
            pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSmestajLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNaziv)
                    .addComponent(lblBrojKreveta))
                .addGap(18, 18, 18)
                .addGroup(pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSmestajLayout.createSequentialGroup()
                        .addGroup(pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlSmestajLayout.createSequentialGroup()
                                .addComponent(lblUkupno)
                                .addGap(18, 18, 18))
                            .addGroup(pnlSmestajLayout.createSequentialGroup()
                                .addComponent(txtBrojKreveta, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(lblCena)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)))
                        .addGroup(pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUkupno, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtNaziv))
                .addGap(17, 17, 17))
        );
        pnlSmestajLayout.setVerticalGroup(
            pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSmestajLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNaziv)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBrojKreveta)
                    .addComponent(lblCena)
                    .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBrojKreveta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(pnlSmestajLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUkupno)
                    .addComponent(txtUkupno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnOtkazi)
                .addGap(18, 18, 18)
                .addComponent(btnRezervisi)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlSmestaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblDatumDolaska)
                        .addGap(18, 18, 18)
                        .addComponent(pickDatumOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDatumOdlaska)
                        .addGap(18, 18, 18)
                        .addComponent(pickDatumDo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSmestaj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDatumDolaska)
                    .addComponent(pickDatumOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatumOdlaska)
                    .addComponent(pickDatumDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRezervisi)
                    .addComponent(btnOtkazi))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pickDatumOdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDatumOdActionPerformed
        osveziUkupno();
    }//GEN-LAST:event_pickDatumOdActionPerformed

    private void pickDatumDoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDatumDoActionPerformed
        osveziUkupno();
    }//GEN-LAST:event_pickDatumDoActionPerformed

    private void btnRezervisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRezervisiActionPerformed
        Date datumOd = pickDatumOd.getDate();
        Date datumDo = pickDatumDo.getDate();
        if (datumDo == null || datumOd == null) {
            JOptionPane.showMessageDialog(this, "Morate uneti datume dolaska i odlaska!", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (datumOd.compareTo(datumDo) >= 0) {
            JOptionPane.showMessageDialog(this, "Datum odlaska mora biti posle datuma dolaska!", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (datumOd.compareTo(new Date()) <= 0){
            JOptionPane.showMessageDialog(this, "Smestaj mozete rezervisati samo za buduce datume!", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Date[] datumi = proveriDostupnost();
        if (datumi != null) {
            String pattern = "dd/MM/yyyy";
            DateFormat df = new SimpleDateFormat(pattern);

            Date prvi = datumi[0];
            Date drugi = datumi[1];
            String prviDatum = df.format(prvi);
            String drugiDatum = df.format(drugi);

            JOptionPane.showMessageDialog(this, "Smestaj je zauzet od " + prviDatum + " do " + drugiDatum + ". Molimo vas promenite termin boravka.", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            Klijent k = (Klijent) Sesija.getInstance().getKorisnik();
            double ukupanIznos = Double.parseDouble(txtUkupno.getText());

            if (k.getStanjeNaRacunu() < ukupanIznos) {
                JOptionPane.showMessageDialog(this, "Nemate dovoljno sredstava na racunu! Vase stanje: " + k.getStanjeNaRacunu(), "Greska", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Rezervacija r = Kontroler.getInstance().kreirajRezervaciju(s, k, datumOd, datumDo, ukupanIznos);

            JOptionPane.showMessageDialog(this.getParent(), "Sistem je zapamtio rezervaciju!", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
            k.setStanjeNaRacunu(k.getStanjeNaRacunu() - ukupanIznos);
            k.getRezervacije().add(r);
            dispose();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRezervisiActionPerformed

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
         try {
            Rezervacija rez = Kontroler.getInstance().otkaziRezervaciju(r);

            JOptionPane.showMessageDialog(this.getParent(), "Sistem je obrisao rezervaciju!", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
            FormListaRezervacija mama = (FormListaRezervacija)this.getParent();
            mama.azurirajTabelu();
            Klijent k = (Klijent) Sesija.getInstance().getKorisnik();
            k.setStanjeNaRacunu(k.getStanjeNaRacunu() + rez.getUkupanIznos());
            k.getRezervacije().remove(rez);
            dispose();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnOtkaziActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnRezervisi;
    private javax.swing.JLabel lblBrojKreveta;
    private javax.swing.JLabel lblCena;
    private javax.swing.JLabel lblDatumDolaska;
    private javax.swing.JLabel lblDatumOdlaska;
    private javax.swing.JLabel lblNaziv;
    private javax.swing.JLabel lblUkupno;
    private org.jdesktop.swingx.JXDatePicker pickDatumDo;
    private org.jdesktop.swingx.JXDatePicker pickDatumOd;
    private javax.swing.JPanel pnlSmestaj;
    private javax.swing.JTextField txtBrojKreveta;
    private javax.swing.JTextField txtCena;
    private javax.swing.JTextField txtNaziv;
    private javax.swing.JTextField txtUkupno;
    // End of variables declaration//GEN-END:variables

    private void popuni() {
        txtBrojKreveta.setText("" + s.getBrojKreveta());
        txtCena.setText("" + s.getCenaPrenocista());
        txtNaziv.setText(s.getNazivSmestaja());
        Date datod = new Date();
        Date datdo = dodajDane(new Date(), 1);
        pickDatumOd.setDate(datod);
        pickDatumDo.setDate(datdo);
        btnOtkazi.setVisible(false);
        osveziUkupno();
    }

    public Date dodajDane(Date date, int days) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.add(Calendar.DATE, days);
        return cal.getTime();
    }

    public long razlikaUDanima(Date date1, Date date2, TimeUnit timeUnit) {
        if (date1 != null && date2 != null) {
            long diffInMillies = date2.getTime() - date1.getTime();
            return timeUnit.convert(diffInMillies, TimeUnit.MILLISECONDS);
        }
        return 0;
    }

    private void osveziUkupno() {
        long razlika = razlikaUDanima(pickDatumOd.getDate(), pickDatumDo.getDate(), TimeUnit.DAYS);
        if (razlika > 0) {
            double ukupno = s.getCenaPrenocista() * razlika;
            txtUkupno.setText("" + ukupno);
        } else {
            txtUkupno.setText("Greska");
        }
    }

    private Date[] proveriDostupnost() {
        Date dolazak = pickDatumOd.getDate();
        Date odlazak = pickDatumDo.getDate();
        Date[] konacni = new Date[2];
        for (Rezervacija r : s.getRezervacije()) {
            if ((r.getDatumOd().compareTo(dolazak) >= 0 && r.getDatumOd().compareTo(odlazak) <= 0) || (r.getDatumDo().compareTo(dolazak) >= 0 && r.getDatumDo().compareTo(odlazak) <= 0)
                    || (r.getDatumOd().compareTo(dolazak) <= 0 && r.getDatumDo().compareTo(odlazak) >= 0)) {
                konacni[0] = r.getDatumOd();
                konacni[1] = r.getDatumDo();
                return konacni;
            }
        }
        return null;
    }

    private void popuni2() {
        txtBrojKreveta.setText("" + r.getSmestaj().getBrojKreveta());
        txtCena.setText("" + r.getSmestaj().getCenaPrenocista());
        txtNaziv.setText(r.getSmestaj().getNazivSmestaja());
        pickDatumOd.setDate(r.getDatumOd());
        pickDatumDo.setDate(r.getDatumDo());
        txtUkupno.setText(""+r.getUkupanIznos());
        txtBrojKreveta.setEnabled(false);
        txtCena.setEnabled(false);
        txtNaziv.setEnabled(false);
        pickDatumOd.setEnabled(false);
        pickDatumDo.setEnabled(false);
        txtUkupno.setEnabled(false);
        btnRezervisi.setVisible(false);
    }
}
