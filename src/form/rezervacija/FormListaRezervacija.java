/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.rezervacija;

import domain.Klijent;
import domain.Rezervacija;
import form.rezervacija.model.TableModelRezervacija;
import form.util.ListaRezervacijaFormMode;
import java.util.Date;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import kontroler.Kontroler;
import sesija.Sesija;

/**
 *
 * @author user
 */
public class FormListaRezervacija extends javax.swing.JDialog {

    private int mode;

    /**
     * Creates new form FormListaRezervacija
     */
    public FormListaRezervacija(java.awt.Frame parent, boolean modal, int mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        popuniTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRezervacije = new javax.swing.JTable();
        txtKriterijum = new javax.swing.JTextField();
        btnPretrazi = new javax.swing.JButton();
        pickDatum = new org.jdesktop.swingx.JXDatePicker();
        btnOtkazi = new javax.swing.JButton();
        btnDetalji = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BuKing - Vase rezervacije");

        tblRezervacije.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRezervacije);

        btnPretrazi.setText("Pretrazi");
        btnPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziActionPerformed(evt);
            }
        });

        pickDatum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickDatumActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        btnDetalji.setText("Detalji");
        btnDetalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetaljiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(txtKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(pickDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPretrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnDetalji)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOtkazi)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPretrazi)
                    .addComponent(pickDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOtkazi)
                    .addComponent(btnDetalji))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziActionPerformed
        if (txtKriterijum.getText().isEmpty() && pickDatum.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Unesite kriterijum za pretragu ili odaberite datum!", "Greska!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String kriterijum = txtKriterijum.getText();
        Date datum = pickDatum.getDate();
        try {
            Rezervacija r = new Rezervacija();
            Klijent pom;
            if (Sesija.getInstance().getKorisnik() instanceof Klijent) {
                pom = (Klijent) Sesija.getInstance().getKorisnik();
            } else {
                pom = new Klijent();
                pom.setKorisnickoIme(Sesija.getInstance().getKorisnik().getKorisnickoIme());
            }
            if (!kriterijum.isEmpty()) {
                pom.setLozinka(kriterijum);
            } else {
                pom.setLozinka(null);
            }
            r.setDatumOd(datum);
            r.setKlijent(pom);
            List<Rezervacija> rezervacije = Kontroler.getInstance().vratiSveRezervacije(r);
            TableModelRezervacija model = (TableModelRezervacija) tblRezervacije.getModel();
            model.setRezervacije(rezervacije);
            model.fireTableDataChanged();
            JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje nijednu rezervaciju po zadatoj vrednosti", "Greska", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPretraziActionPerformed

    private void pickDatumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDatumActionPerformed
    }//GEN-LAST:event_pickDatumActionPerformed

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
        try {
            int selectedRow = vratiOznacenRed();

            TableModelRezervacija model = (TableModelRezervacija) tblRezervacije.getModel();
            Rezervacija rez = model.getRezervacija(selectedRow);
            if (rez.getDatumOd().compareTo(new Date()) <= 0) {
                JOptionPane.showMessageDialog(this, "Ne mozete otkazati rezervaciju koja je u toku ili je prosla!", "Greska", JOptionPane.ERROR_MESSAGE);
                return;
            }
            JDialog frm = new FormNovaRezervacija(this, true, model.getRezervacija(selectedRow), ListaRezervacijaFormMode.OTKAZI);
            frm.setVisible(true);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnOtkaziActionPerformed

    private void btnDetaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetaljiActionPerformed
        try {
            int selectedRow = vratiOznacenRed();

            TableModelRezervacija model = (TableModelRezervacija) tblRezervacije.getModel();
            JDialog frm = new FormNovaRezervacija(this, true, model.getRezervacija(selectedRow), ListaRezervacijaFormMode.PRETRAZI);
            frm.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDetaljiActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetalji;
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnPretrazi;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker pickDatum;
    private javax.swing.JTable tblRezervacije;
    private javax.swing.JTextField txtKriterijum;
    // End of variables declaration//GEN-END:variables

    private void popuniTabelu() {
        try {
            setLocationRelativeTo(null);
            Rezervacija pom = new Rezervacija();
            Klijent pom2;
            if (Sesija.getInstance().getKorisnik() instanceof Klijent) {
                pom2 = (Klijent) Sesija.getInstance().getKorisnik();
            } else {
                pom2 = new Klijent();
                pom2.setKorisnickoIme(Sesija.getInstance().getKorisnik().getKorisnickoIme());
            }
            pom.setKlijent(pom2);
            List<Rezervacija> r = Kontroler.getInstance().vratiSveRezervacije(pom);
            TableModelRezervacija model = new TableModelRezervacija(r);
            tblRezervacije.setModel(model);
            if (mode == ListaRezervacijaFormMode.PRETRAZI) {
                btnOtkazi.setVisible(false);
            } else {
                btnDetalji.setVisible(false);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja rezervacija!", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int vratiOznacenRed() throws Exception {
        int selectedRow = tblRezervacije.getSelectedRow();
        if (selectedRow == -1) {
            throw new Exception("Morate oznaciti rezervaciju!");
        }
        return selectedRow;
    }

    public void azurirajTabelu() throws Exception {
        Klijent k = (Klijent) Sesija.getInstance().getKorisnik();
        Rezervacija nova = new Rezervacija();
        nova.setKlijent(k);
        List<Rezervacija> s = Kontroler.getInstance().vratiSveRezervacije(nova);
        TableModelRezervacija model = (TableModelRezervacija) tblRezervacije.getModel();
        model.setRezervacije(s);
        model.fireTableDataChanged();
    }
}
